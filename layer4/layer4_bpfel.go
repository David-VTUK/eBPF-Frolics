// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadLayer4 returns the embedded CollectionSpec for layer4.
func loadLayer4() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Layer4Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load layer4: %w", err)
	}

	return spec, err
}

// loadLayer4Objects loads layer4 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*layer4Objects
//	*layer4Programs
//	*layer4Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadLayer4Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadLayer4()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// layer4Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type layer4Specs struct {
	layer4ProgramSpecs
	layer4MapSpecs
}

// layer4Specs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type layer4ProgramSpecs struct {
	GetPacketProtocol *ebpf.ProgramSpec `ebpf:"get_packet_protocol"`
}

// layer4MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type layer4MapSpecs struct {
	ProtocolCount *ebpf.MapSpec `ebpf:"protocol_count"`
}

// layer4Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadLayer4Objects or ebpf.CollectionSpec.LoadAndAssign.
type layer4Objects struct {
	layer4Programs
	layer4Maps
}

func (o *layer4Objects) Close() error {
	return _Layer4Close(
		&o.layer4Programs,
		&o.layer4Maps,
	)
}

// layer4Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadLayer4Objects or ebpf.CollectionSpec.LoadAndAssign.
type layer4Maps struct {
	ProtocolCount *ebpf.Map `ebpf:"protocol_count"`
}

func (m *layer4Maps) Close() error {
	return _Layer4Close(
		m.ProtocolCount,
	)
}

// layer4Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadLayer4Objects or ebpf.CollectionSpec.LoadAndAssign.
type layer4Programs struct {
	GetPacketProtocol *ebpf.Program `ebpf:"get_packet_protocol"`
}

func (p *layer4Programs) Close() error {
	return _Layer4Close(
		p.GetPacketProtocol,
	)
}

func _Layer4Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed layer4_bpfel.o
var _Layer4Bytes []byte
