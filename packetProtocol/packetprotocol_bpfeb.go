// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPacketProtocol returns the embedded CollectionSpec for packetProtocol.
func loadPacketProtocol() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PacketProtocolBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load packetProtocol: %w", err)
	}

	return spec, err
}

// loadPacketProtocolObjects loads packetProtocol and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*packetProtocolObjects
//	*packetProtocolPrograms
//	*packetProtocolMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPacketProtocolObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPacketProtocol()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// packetProtocolSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetProtocolSpecs struct {
	packetProtocolProgramSpecs
	packetProtocolMapSpecs
}

// packetProtocolSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetProtocolProgramSpecs struct {
	GetPacketProtocol *ebpf.ProgramSpec `ebpf:"get_packet_protocol"`
}

// packetProtocolMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetProtocolMapSpecs struct {
	ProtocolCount *ebpf.MapSpec `ebpf:"protocol_count"`
}

// packetProtocolObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPacketProtocolObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetProtocolObjects struct {
	packetProtocolPrograms
	packetProtocolMaps
}

func (o *packetProtocolObjects) Close() error {
	return _PacketProtocolClose(
		&o.packetProtocolPrograms,
		&o.packetProtocolMaps,
	)
}

// packetProtocolMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPacketProtocolObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetProtocolMaps struct {
	ProtocolCount *ebpf.Map `ebpf:"protocol_count"`
}

func (m *packetProtocolMaps) Close() error {
	return _PacketProtocolClose(
		m.ProtocolCount,
	)
}

// packetProtocolPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPacketProtocolObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetProtocolPrograms struct {
	GetPacketProtocol *ebpf.Program `ebpf:"get_packet_protocol"`
}

func (p *packetProtocolPrograms) Close() error {
	return _PacketProtocolClose(
		p.GetPacketProtocol,
	)
}

func _PacketProtocolClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed packetprotocol_bpfeb.o
var _PacketProtocolBytes []byte
